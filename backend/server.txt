const express = require('express');
const cors = require('cors');
const app = express();
const PORT = 3000;

app.use(express.json());
app.use(cors());

// Simulate user data storage
const users = [];

// Route for registering users
app.post('/register', (req, res) => {
  const { email, password } = req.body;
  console.log('Register request:', req.body);

  // Simulate saving user data
  users.push({ email, password });
  res.status(200).json({ success: true, message: 'User registered successfully' });
});

// Route for logging in users
app.post('/login', (req, res) => {
  const { email, password } = req.body;
  console.log('Login request:', req.body);

  // Simulate checking user credentials
  const user = users.find(u => u.email === email && u.password === password);
  if (user) {
    res.status(200).json({ success: true, message: 'Login successful' });
  } else {
    res.status(401).json({ success: false, message: 'Invalid credentials' });
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
/////////////////
// // const express = require('express');
// // const cors = require('cors');
// // // const session = require('express-session');
// // const dotenv = require('dotenv');
// // const crypto = require('crypto');
// // const fs = require('fs');
// // const path = require('path');
// // const mongoose = require('mongoose');
// // const bcrypt = require('bcryptjs');
// // const bodyParser = require('body-parser');
// // const { type } = require('os');

// // const app = express();
// // // const PORT = 5000;

// // // Load environment varibales from .env file
// // dotenv.config();

// // // Generate and save secret key
// // // const secretKey = generateRandomKey();
// // // saveSecretKeyToEnvFile(secretKey);



// // const corsOptions = {
// //     origin: 'http://127.0.0.1:5500', // Allow only this origin
// //     optionsSuccessStatus: 200, // Some legacy browsers choke on 204
// //     credentials: true // Allow credentials (cookies, authorization headers, etc.)

// // };

// // app.use(cors(corsOptions));
// // app.use(express.json());

// // mongoose.connect(process.env.MONGODB_CONNECTION_STRING, {useNewUrlParser: true, useUnifiedTopology: true})
// // .then(() => console.log('Connected to MongoDB'))
// // .catch(err => console.log('Could not connect to MongoDb', err));

// // // app.use (session({
// // //     secret: process.env.SESSION_SECRET,
// // //     resave: false,
// // //     saveUninitialized: true,
// // //     cookie: {secure: false, maxAge: 60000 },
// // // }));

// // // Array to store registered users
// // // const users = [];

// // const userSchema = new mongoose.Schema({
// //     name: String,
// //     username: {type: String, unique: true},
// //     email: {type: String, unique: true},
// //     password: String
// // })
// // const user = mongoose.model('User', userSchema);

// // // Route for registering users
// // // app.post('/register', async (req, res) => {
// // //     const { name, username, email, password } = req.body;
    
// // //     const userSecretKey = generateRandomKey();
// // //     // Add user to the users array with a unique secret key
// // //     users.push({ name, username, email, password, secretKey: userSecretKey});
// // //     req.session.username = username; // Set username in session
// // //     req.session.secretKey = secretKey; // Save user secret key in session
    
// // //     console.log('Registered users:', users); // Debugging line

// // //     // Send success response
// // //     res.status(200).json({ success: true, message: 'User registered successfully' });
// // // });
// // app.post('/register', async (req, res) => {
// //     try{
// //         const {name, username, email,password} = req.body;
// //         const hashedPassword = await bcrypt.hash(password,32);
// //         const user = new User ({name, username, email, password: hashedPassword});
// //         await user.save();
// //         res.status(201).json({success: true, message: 'user registered successfully'});
// //     }
// //     catch(error){
// //         console.log(error);
// //         res.status(500).json({success: true, message: 'user registration failed'});
// //     }
// // });

// // // Route for logging in users
// // // app.post('/login', (req, res) => {
// // //     const { username, password } = req.body;

// // //     console.log('Login attempt:', { username, password }); // Debugging line

// // //     // Check user credentials in the users array
// // //     const user = users.find(u => u.username === username && u.password === password);

// // //     if (user) {
// // //         console.log('Login successful for user:', username); // Debugging line
// // //         req.session.username = username; // Set username in session
// // //         req.session.secretKey = user.secretKey; // Save user secret key in session
// // //         console.log(req.session.username, req.session.secretKey);
// // //         // Send success response if user found
// // //         res.status(200).json({ success: true, message: 'Login successful' });
// // //     } 
// // //     else {
// // //         console.log('Login failed for user:', username); // Debugging line
// // //         // Send failure response if user not found
// // //         res.status(401).json({ success: false, message: 'Invalid credentials' });
// // //     }
// // // });
// // app.post('/login', async (req, res) => {
// //     try{
// //         const {username, password} = req.body;
// //         const user = await User.findOne ({username});
// //         if(!user){
// //             res.status(400).json({success: false, message:'Invalid username or pssword'})
// //         }
// //         const isMatch = await bcrypt.compare(password, user.password);
// //         if(!isMatch){
// //             res.status(400).json({success: false, message:'Invalid username or pssword'})
// //         }
// //         const token = jwt.sign({userId: user._id}, process.env.JWT_SECRET, {expiresIn: '1h'});
// //         res.cookie('token', token, {httpOnly: true});
// //         res.status(200).json({success: true, message: 'Login Successful'});
// //     }
// //     catch(error){
// //         console.log(error);
// //         res.status(400).json({success: false, message: 'Login Failed'});
// //     }
// // })

// // // app.post('/signout', (req, res) => {
// // //     // const { username, password } = req.body;
// // //     const { username } = req.session; // Access username from the session
// // //     console.log(req.session.username);
// // //     const { secretKey } = req.session;
// // //     const user = users.find(u => u.username === username && u.secretKey === secretKey);


// // //     req.session.destroy(err => {
// // //         if (err) {
// // //             console.error('Error destroying session: ', err);
// // //             return res.status(500).json({ success: false, message: 'Failed to sign out' });
// // //         } else {
// // //             if (user) {
// // //                 console.log('Clearing session for: ', username);
// // //             } else {
// // //                 console.log('No username found in session');
// // //             }
// // //             // res.clearCookie('session_id'); // Clear session cookie if using cookies for session
// // //             res.clearCookie('connect.sid'); // Clear session cookie
// // //             console.log('Cookie Cleared');
// // //             res.status(200).json({ success: true, message: 'Signout successful' });
// // //         }
// // //     });
// // // });
// // app.post('/signout', (req, res) => {
// //     res.clearCookie('token');
// //     res.status(200).json({success: true, message: 'Signout Successfull'})
// // })


// // // app.get('/users', (req, res) => {
// // //     res.json(users);
// // // });

// // // app.listen(PORT, () => {
// // //     console.log(`Server is running on http://localhost:${PORT}`);
// // // });

// // const port = process.env.PORT || 5000;
// // app.listen(port,() => {
// //     console.log(`Server is running on http://localhost:${port}`)
// // })
// // // // Function to generate random key
// // // function generateRandomKey(length = 64) {
// // //     return crypto.randomBytes(length).toString('hex');
// // // }

// // // // Function to save secret key to .env file
// // // function saveSecretKeyToEnvFile(secretKey) {
// // //     const envFilePath = path.join(__dirname, '.env');
// // //     const envFileContent = `SESSION_SECRET=${secretKey}\n`;
// // //     fs.writeFileSync(envFilePath, envFileContent);
// // //     console.log(`Generated secret key and saved to .env file: ${secretKey}`);
// // // }
